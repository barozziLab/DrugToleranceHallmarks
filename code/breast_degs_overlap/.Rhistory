plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = gene_class)) +
geom_boxplot() +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
for (test_id in (unique(data_bp$id))) {
pa_fc <- data_bp %>% filter(id == test_id, gene_class == "PreAdaptive") %>% pull(avg_log2FC)
a_fc <- data_bp %>% filter(id == test_id, gene_class == "Adaptive") %>% pull(avg_log2FC)
test <- wilcox.test(x = pa_fc, y = a_fc, alternative = "two.sided", exact = FALSE)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("repr_vs_sel", test_id, dir, sep = "_"), pval = test$p.value)
)
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
plt_prefix <- "firstLine_PA_pervasiveness"
dir = "Up"
which_field <- ifelse(dir == "Up", "MCF7_UP_FirstLine_fraction", "MCF7_DOWN_FirstLine_fraction")
markers_pre_filt <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
frac_levels <- markers_pre_filt %>% select(which_field) %>% pull() %>% unique() %>% sort()
stats <- markers_pre_filt %>%
select(id, gene_class, which_field) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels)) %>%
group_by(id, gene_class, Fraction) %>%
summarise(Genes = n()) %>%
ungroup()
stats
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=Fraction, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels))
data_bp
data_bp$id %>% unique()
View(data_bp)
gene_class <- "PreAdaptive"
id <- "MCF7_Fulv"-2d
id <- "MCF7_Fulv-2d"
test_data <- data_bp %>% filter(id == id, gene_class = gene_class)
test_datatest_data <- data_bp %>% filter(id == id, gene_class == gene_class)
test_data <- data_bp %>% filter(id == id, gene_class == gene_class)
test_data
data_bp
test_data <- data_bp %>% filter(id == id, gene_class == gene_class)
test_data
for (gene_class_sel in c("PreAdaptive", "Adaptive")) {
for (id_sel in unique(data_bp$id)) {
test_data <- data_bp %>% filter(id == id_sel, gene_class == gene_class_sel)
head(test_data)
}
}
print(head(test_data))
for (gene_class_sel in c("PreAdaptive", "Adaptive")) {
for (id_sel in unique(data_bp$id)) {
test_data <- data_bp %>% filter(id == id_sel, gene_class == gene_class_sel)
print(head(test_data))
}
}
for (gene_class_sel in c("PreAdaptive", "Adaptive")) {
for (id_sel in unique(data_bp$id)) {
test_data <- data_bp %>% filter(id == id_sel, gene_class == gene_class_sel)
print(test_data)
}
}
id_sel
test_data$Fraction
x <- c(2.9, 3.0, 2.5, 2.6, 3.2) # normal subjects
y <- c(3.8, 2.7, 4.0, 2.4)      # with obstructive airway disease
z <- c(2.8, 3.4, 3.7, 2.2, 2.0) # wi
x <- c(x, y, z)
x
kruskal.test(x = test_data$avg_log2FC, test_data$Fraction)
test <- kruskal.test(x = test_data$avg_log2FC, test_data$Fraction)
pval_bp <- tibble()
for (dir in c("Up", "Down")) {
stats <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
select(id, gene_class) %>%
group_by(id, gene_class) %>%
summarise(Genes = n()) %>%
ungroup()
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=gene_class, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
#Fold-changes
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = gene_class)) +
geom_boxplot() +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
for (test_id in (unique(data_bp$id))) {
pa_fc <- data_bp %>% filter(id == test_id, gene_class == "PreAdaptive") %>% pull(avg_log2FC)
a_fc <- data_bp %>% filter(id == test_id, gene_class == "Adaptive") %>% pull(avg_log2FC)
test <- wilcox.test(x = pa_fc, y = a_fc, alternative = "two.sided", exact = FALSE)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("repr_vs_sel", test_id, dir, sep = "_"), pval = test$p.value)
)
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
plt_prefix <- "firstLine_PA_pervasiveness"
for (dir in c("Up", "Down")) {
which_field <- ifelse(dir == "Up", "MCF7_UP_FirstLine_fraction", "MCF7_DOWN_FirstLine_fraction")
markers_pre_filt <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
frac_levels <- markers_pre_filt %>% select(which_field) %>% pull() %>% unique() %>% sort()
stats <- markers_pre_filt %>%
select(id, gene_class, which_field) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels)) %>%
group_by(id, gene_class, Fraction) %>%
summarise(Genes = n()) %>%
ungroup()
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=Fraction, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels))
plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = Fraction)) +
geom_boxplot() +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
for (gene_class_sel in c("PreAdaptive", "Adaptive")) {
for (id_sel in unique(data_bp$id)) {
test_data <- data_bp %>% filter(id == id_sel, gene_class == gene_class_sel)
test <- kruskal.test(x = test_data$avg_log2FC, test_data$Fraction)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("firstline_PA_pervasiveness", test_id, gene_class, dir, sep = "_"), pval = test$p.value)
)
}
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
pval_bp
pval_bp <- tibble()
for (dir in c("Up", "Down")) {
stats <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
select(id, gene_class) %>%
group_by(id, gene_class) %>%
summarise(Genes = n()) %>%
ungroup()
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=gene_class, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
#Fold-changes
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = gene_class)) +
geom_boxplot() +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
for (test_id in (unique(data_bp$id))) {
pa_fc <- data_bp %>% filter(id == test_id, gene_class == "PreAdaptive") %>% pull(avg_log2FC)
a_fc <- data_bp %>% filter(id == test_id, gene_class == "Adaptive") %>% pull(avg_log2FC)
test <- wilcox.test(x = pa_fc, y = a_fc, alternative = "two.sided", exact = FALSE)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("repr_vs_sel", test_id, dir, sep = "_"), pval = test$p.value)
)
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
plt_prefix <- "firstLine_PA_pervasiveness"
for (dir in c("Up", "Down")) {
which_field <- ifelse(dir == "Up", "MCF7_UP_FirstLine_fraction", "MCF7_DOWN_FirstLine_fraction")
markers_pre_filt <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
frac_levels <- markers_pre_filt %>% select(which_field) %>% pull() %>% unique() %>% sort()
stats <- markers_pre_filt %>%
select(id, gene_class, which_field) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels)) %>%
group_by(id, gene_class, Fraction) %>%
summarise(Genes = n()) %>%
ungroup()
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=Fraction, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels))
plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = Fraction)) +
geom_boxplot() +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
for (gene_class_sel in c("PreAdaptive", "Adaptive")) {
for (id_sel in unique(data_bp$id)) {
test_data <- data_bp %>% filter(id == id_sel, gene_class == gene_class_sel)
test <- kruskal.test(x = test_data$avg_log2FC, test_data$Fraction)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("firstline_PA_pervasiveness", id_sel, gene_class, dir, sep = "_"), pval = test$p.value)
)
}
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
pval_bp
plt_prefix <- "firstLine_PA"
pval_bp <- tibble()
for (dir in c("Up", "Down")) {
stats <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
select(id, gene_class) %>%
group_by(id, gene_class) %>%
summarise(Genes = n()) %>%
ungroup()
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=gene_class, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
#Fold-changes
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = gene_class)) +
geom_boxplot() +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
for (test_id in (unique(data_bp$id))) {
pa_fc <- data_bp %>% filter(id == test_id, gene_class == "PreAdaptive") %>% pull(avg_log2FC)
a_fc <- data_bp %>% filter(id == test_id, gene_class == "Adaptive") %>% pull(avg_log2FC)
test <- wilcox.test(x = pa_fc, y = a_fc, alternative = "two.sided", exact = FALSE)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("repr_vs_sel", test_id, dir, sep = "_"), pval = test$p.value, test = "Wilcoxon")
)
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
plt_prefix <- "firstLine_PA_pervasiveness"
for (dir in c("Up", "Down")) {
which_field <- ifelse(dir == "Up", "MCF7_UP_FirstLine_fraction", "MCF7_DOWN_FirstLine_fraction")
markers_pre_filt <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
frac_levels <- markers_pre_filt %>% select(which_field) %>% pull() %>% unique() %>% sort()
stats <- markers_pre_filt %>%
select(id, gene_class, which_field) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels)) %>%
group_by(id, gene_class, Fraction) %>%
summarise(Genes = n()) %>%
ungroup()
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=Fraction, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels))
plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = Fraction)) +
geom_boxplot() +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
for (gene_class_sel in c("PreAdaptive", "Adaptive")) {
for (id_sel in unique(data_bp$id)) {
test_data <- data_bp %>% filter(id == id_sel, gene_class == gene_class_sel)
test <- kruskal.test(x = test_data$avg_log2FC, test_data$Fraction)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("firstline_PA_pervasiveness", id_sel, gene_class, dir, sep = "_"), pval = test$p.value, test = "Kruskal.wallis")
)
}
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
pval_bp
write_tsv(pval_bp, "overlaps.boxplots.tests.tsv")
plots <- list()
gene_lists <- pairs %>% dplyr::filter(Line == "First") %>% pull(Sample) %>% unique()
# exclude LNCaP
gene_lists <- gene_lists[gene_lists != "LNCaP_WM-2d" & gene_lists != "LNCaP_WM-7d" & gene_lists != "MCF7-D538G_WM-2d"]
plt_prefix <- "firstLine_PA"
pval_bp <- tibble()
for (dir in c("Up", "Down")) {
stats <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
select(id, gene_class) %>%
group_by(id, gene_class) %>%
summarise(Genes = n()) %>%
ungroup()
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=gene_class, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
#Fold-changes
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = gene_class)) +
geom_boxplot() +
scale_fill_brewer(name = "", palette="Paired") +
theme_bw() +
coord_flip()
for (test_id in (unique(data_bp$id))) {
pa_fc <- data_bp %>% filter(id == test_id, gene_class == "PreAdaptive") %>% pull(avg_log2FC)
a_fc <- data_bp %>% filter(id == test_id, gene_class == "Adaptive") %>% pull(avg_log2FC)
test <- wilcox.test(x = pa_fc, y = a_fc, alternative = "two.sided", exact = FALSE)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("repr_vs_sel", test_id, dir, sep = "_"), pval = test$p.value, test = "Wilcoxon")
)
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
plt_prefix <- "firstLine_PA_pervasiveness"
for (dir in c("Up", "Down")) {
which_field <- ifelse(dir == "Up", "MCF7_UP_FirstLine_fraction", "MCF7_DOWN_FirstLine_fraction")
markers_pre_filt <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir))
frac_levels <- markers_pre_filt %>% select(which_field) %>% pull() %>% unique() %>% sort()
stats <- markers_pre_filt %>%
select(id, gene_class, which_field) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels)) %>%
group_by(id, gene_class, Fraction) %>%
summarise(Genes = n()) %>%
ungroup()
for (plt_type in c("fill", "stack")) {
plt <- ggplot(stats, aes(fill=Fraction, y=Genes, x=id)) +
geom_bar(position=plt_type, stat="identity", colour="black") +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
plot_name <- paste(plt_prefix, "_", dir, "_barplot_", plt_type, sep = "")
plots[[plot_name]] <- plt
}
data_bp <- markers_cons %>%
dplyr::filter(id %in% gene_lists & (therapy_regulation == dir)) %>%
dplyr::rename(Fraction = !!which_field) %>%
mutate(Fraction = factor(Fraction, levels = frac_levels))
plt <- ggplot(data_bp %>% as.data.frame(), mapping = aes(x = id, y = avg_log2FC, fill = Fraction)) +
geom_boxplot() +
facet_wrap(~gene_class) +
scale_fill_brewer(name = "", palette="Oranges") +
theme_bw() +
coord_flip()
for (gene_class_sel in c("PreAdaptive", "Adaptive")) {
for (id_sel in unique(data_bp$id)) {
test_data <- data_bp %>% filter(id == id_sel, gene_class == gene_class_sel)
test <- kruskal.test(x = test_data$avg_log2FC, test_data$Fraction)
pval_bp <- rbind(
pval_bp,
tibble(test_id = paste("firstline_PA_pervasiveness", id_sel, gene_class_sel, dir, sep = "_"), pval = test$p.value, test = "Kruskal.wallis")
)
}
}
plot_name <- paste(plt_prefix, "_", dir, "_fc_boxplot", sep = "")
plots[[plot_name]] <- plt
}
pval_bp
write_tsv(pval_bp, "overlaps.boxplots.tests.tsv")
setwd("../../../repo_v0/code/breast_tosica/")
source("lib.R")
writeLines(capture.output(sessionInfo()), "sessionInfo.2024-11-17.txt")
setwd("../breast_pa_classifier/")
library(Seurat)
library(tidyverse)
library(tidymodels)
library(RColorBrewer)
library(viridis)
library(gdata)
library(cowplot)
colors <- read.xls("../../datasets/data/colors_updated_2024.xlsx")
colors <- read.xls("../../datasets/data/colors_updated_2024.xlsx")%>%
mutate(description = str_split_i(string = description, pattern = "MCF7.", i = 2))
# color scheme
colors <- read.xls("../data/colors_updated_2024.xlsx") %>%
mutate(description = str_split_i(string = description, pattern = "MCF7.", i = 2))
col <- colors$color_dark
names(col) <- colors$description
data <- read_tsv(file = "../../datasets/breast_seurat/so_metadata_post_integration.tsv")
data <- read_tsv(file = "../../datasets/breast_seurat/MCF7_cca_kit_5k_feat/so_metadata_post_integration.tsv")
# metadata
metadata <- read.xls("../data/metadata_filtered_ordered.xlsx") %>%
mutate(orig.ident = paste0(description, "_batch-", batch)) %>%
mutate(description = str_split_i(string = description, pattern = "MCF7.", i = 2))
data_noRibo <- data %>% left_join(metadata, by = c("orig.ident" = "orig.ident")) %>%
select(rowname, description, class, post_integration_pa_up_noRibo1, post_integration_pa_down_noRibo1) %>%
mutate(description = factor(description, levels = unique(metadata$description)),
class = factor(class, levels = unique(metadata$class)))
data_ribo <- data %>% left_join(metadata, by = c("orig.ident" = "orig.ident")) %>%
select(rowname, description, class, post_integration_pa_up1, post_integration_pa_down1) %>%
mutate(description = factor(description, levels = unique(metadata$description)),
class = factor(class, levels = unique(metadata$class)))
full_data <- data_noRibo # select which dataset to train the model with
# Train model only on WM vs. RM
training_full_WM_RM <- full_data %>%
filter(description %in% c("RM", "WM-2d"))
pa_up_distr <- ggplot(training_full_WM_RM,
aes(x = description, y = post_integration_pa_up_noRibo1, fill = description)) +
geom_violin(position = position_dodge(0.8), scale = "width") +
geom_boxplot(position = position_dodge(0.8), width = 0.05, outlier.shape = NA) +
scale_fill_brewer(palette = "Accent") +
theme_classic()
pa_down_distr <- ggplot(training_full_WM_RM,
aes(x = description, y = post_integration_pa_down_noRibo1, fill = description)) +
geom_violin(position = position_dodge(0.8), scale = "width") +
geom_boxplot(position = position_dodge(0.8), width = 0.05, outlier.shape = NA) +
scale_fill_brewer(palette = "Accent") +
theme_classic()
# Reorder the conditions (make factor)
full_data <- full_data %>% mutate(description = factor(description, levels = colors$description))
# Add barplots to visualize the number of observations in each group (also in above plots)
pa_up_all <- ggplot(full_data,
aes(x = description, y = post_integration_pa_up_noRibo1, fill = description)) +
geom_violin(position = position_dodge(0.8), scale = "width") +
geom_boxplot(position = position_dodge(0.8), width = 0.05, outlier.shape = NA) +
theme_classic() +
scale_fill_manual(values = col) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -90, vjust = 0.5, hjust = 0))
pa_down_all <- ggplot(full_data,
aes(x = description, y = post_integration_pa_down_noRibo1, fill = description)) +
geom_violin(position = position_dodge(0.8), scale = "width") +
geom_boxplot(position = position_dodge(0.8), width = 0.05, outlier.shape = NA) +
theme_classic() +
scale_fill_manual(values = col) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -90, vjust = 0.5, hjust = 0))
writeLines(capture.output(sessionInfo()), "sessionInfo.2024-11-17.txt")
setwd("../breast_degs_overlap/")
source("lib.R")
source("lib.R")
writeLines(capture.output(sessionInfo()), "sessionInfo.2024-11-17.txt")
secondLine_only_7d <- FALSE
####~
####~ Load all markers from scRNA-seq experiments and add basic annotations
pa_up <- read_tsv("../data/PA_UP.txt", col_names = F) %>%
dplyr::rename(gene = X1)
pa_down <- read_tsv("../data/PA_DOWN.txt", col_names = F) %>%
dplyr::rename(gene = X1)
avg_expr_bca <- read_tsv("../../datasets/breast_seurat/MCF7_cca_kit_5k_feat/avg_expr_breast.tsv")
avg_expr_pca <- read_tsv("../../datasets/prostate_seurat/avg_expr_prostate.tsv")
