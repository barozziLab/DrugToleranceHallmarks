##############
net_tfs <- get_collectri(organism='human', split_complexes=FALSE)
3+#
3+3
library(Seurat)
plot(1:2)
library(tidyverse)
library(ggplot2)
library(GenomicFeatures)
library(tidyverse)
library(Seurat)
library(GenomicFeatures)
library(GenomicAlignments
)
library(DESeq2)
library(apeglm)
library(cowplot)
library(msigdbr)
library(org.mm.eg.db)
library(org.Mm.eg.db)
library(EnhancedVolcano)
library(ComplexHeatmap)
library(circlize)
library(clusterprofiler)
library(clusterProfiler)
library(Seurat)
library(scCustomize)
library(tidyverse)
d <- tibble(seq = c(1,2), pval = c(0.1, 0.01), sample = c("r1", "r2"))
d
d <- tibble(seq = c(1,2), pval = c(0.1, 0.01), sample = c("r1", "r2"))
d %>% pivot_wider(names_from = sample, values_from = se)
d %>% pivot_wider(names_from = sample, values_from = seq)
d %>% pivot_wider(names_from = sample, values_from = seq)
d <- tibble(seq = c(1,2), pval = c(0.1, 0.01), coverage = c(10,20), sample = c("r1", "r2"))
d
d %>% pivot_wider(names_from = sample, values_from = seq)
d %>% pivot_wider(cols = -c(pval), names_from = sample, values_from = coverage)
d %>% pivot_wider(cols = -c(pval), names_from = sample, values_from = coverage)
d %>% pivot_wider(cols = -pval, names_from = sample, values_from = coverage)
d
d %>% pivot_wider(cols = -pval, names_from = sample, values_from = coverage)
d %>% select(-pval) %>% pivot_wider(names_from = sample, values_from = coverage)
d %>% select(-pval) %>% pivot_wider(names_from = sample, values_from = pval)
d %>% select(-coverage) %>% pivot_wider(names_from = sample, values_from = pval)
d %>% select(-coverage) %>% mutate(pval = pval <= 0.05) %>% pivot_wider(names_from = sample, values_from = pval)
knitr::opts_chunk$set(warning=FALSE)
options(connectionObserver = NULL)
library("tidyverse")
library("tidyverse")
library("DESeq2")
library("apeglm")
library("AnnotationDbi")
library("org.Mm.eg.db")
library("EnhancedVolcano")
library("ComplexHeatmap")
library("EnhancedVolcano")
library("ComplexHeatmap")
library("circlize")
counts <- read.table("counts.txt", sep = "\t")
metadata <- read_tsv("metadata.txt")
head(metadata)
metadata <- metadata %>%
dplyr::mutate(group = factor(group, levels = c("UT", "LPS_4h")))
se <- SummarizedExperiment(assays = list(counts = as.matrix(counts)),
colData = as.data.frame(metadata))
dds <- DESeqDataSet(se, design = ~ group)
dds <- estimateSizeFactors(dds)
colData(dds)
vsd <- vst(dds, blind = TRUE)
vsd <- vst(dds, blind = TRUE)
pca_out <- plotPCA(vsd, intgroup = c("group", "replicate"))
plot(pca_out)
ggplot(pca_out$data, aes(x = PC1, y = PC2, col = group.1, shape = as.factor(replicate))) +
geom_point(size = 4) +
theme_bw()
dds <- DESeq(dds)
dds <- DESeq(dds)
saveRDS(object = dds, file = "dds.rds")
res <- results(dds)
res
plotMA(dds)
dds_shrunk <- lfcShrink(dds, "group_LPS_4h_vs_UT")
dds_shrunk <- lfcShrink(dds, "group_LPS_4h_vs_UT")
plotMA(dds_shrunk)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 1e-3,
FCcutoff = 1,
pointSize = 1.5,
labSize = 3)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 1e-3,
FCcutoff = 1,
pointSize = 1.5,
labSize = 3,
ylim = c(0, 20))
ensembl_id <- gsub("\\..*", "", row.names(res))
symbols <- mapIds(org.Mm.eg.db,
keys=ensembl_id,
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
res_tib <- as_tibble(res)
res_tib <- res_tib %>%
dplyr::mutate(ensembl_id = ensembl_id) %>%
dplyr::mutate(gene_symbol = as.character(symbols)) %>%
dplyr::select(gene_symbol, ensembl_id, everything()) %>%
dplyr::filter(baseMean > 0) %>%
dplyr::filter(!is.na(padj))
write_tsv(res_tib, file = "DEseq2.results.txt")
res_tib
library("tidyverse")
library("tidyverse")
library("msigdbr")
library("clusterProfiler")
results <- read_tsv("DESeq2.results.txt")
results
deg_define <- function(log2FC, padj) {
if (log2FC <= -1 & padj <= 0.05) {
return("Down")
} else if (log2FC >= 1 & padj <= 0.05) {
return("Up")
} else {
return("Unchanged")
}
}
results <- results %>%
rowwise() %>%
dplyr::mutate(DEG = deg_define(log2FoldChange, padj)) %>%
ungroup()
results
gsea_H <- msigdbr(species = "Mus musculus", category = "H")
gsea_H_df <- gsea_H %>%
dplyr::select(gs_name, gene_symbol) %>%
as.data.frame()
results %>%
dplyr::filter(DEG == "Up" & !is.na(gene_symbol))
degs_up <- results %>%
dplyr::filter(DEG == "Up" & !is.na(gene_symbol)) %>%
pull(gene_symbol)
gse_res <- enricher(gene = degs_up,
TERM2GENE = gsea_H_df,
minGSSize = 10,
maxGSSize = 2000)
head(gse_res@result)
gse_res@result %>%
as_tibble()
gsea_H
library("tidyverse")
library("DESeq2")
library("decoupleR")
library("apeglm")
library("AnnotationDbi")
library("org.Mm.eg.db")
dds <- readRDS(file = "dds.rds")
res <- lfcShrink(dds, "group_LPS_4h_vs_UT")
ensembl_id <- gsub("\\..*", "", row.names(res))
symbols <- mapIds(org.Mm.eg.db,
keys=ensembl_id,
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
res_tib <- as_tibble(res)
res_tib <- res_tib %>%
dplyr::mutate(ensembl_id = ensembl_id) %>%
dplyr::mutate(gene_symbol = as.character(symbols)) %>%
dplyr::select(gene_symbol, ensembl_id, everything()) %>%
dplyr::filter(!is.na(log2FoldChange)) %>%
dplyr::filter(!is.na(gene_symbol))
net <- read_tsv(file = "collectri.mm.txt")
net
mat_log2fc <- res_tib %>%
dplyr::select(gene_symbol, log2FoldChange) %>%
dplyr::group_by(gene_symbol) %>%
dplyr::summarise(n = n(), min = min(log2FoldChange), max = max(log2FoldChange)) %>%
ungroup() %>%
dplyr::mutate(log2FoldChange = ifelse(abs(min) > abs(max), min, max)) %>%
dplyr::select(gene_symbol, log2FoldChange) %>%
column_to_rownames(var = "gene_symbol")
contrast_acts <- run_ulm(mat = mat_log2fc,
net = net,
.source='source',
.target='target',
.mor='mor',
minsize = 5)
contrast_acts <- run_ulm(mat = mat_log2fc,
net = net,
.source='source',
.target='target',
.mor='mor',
minsize = 5)
contrast_acts
library(tidyverse)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
## Script name: fc.R
##
## Description:
#~
## Factors Characterization
## Investigate gene factor loadings in
## different conditions
##
## Authors:
#~
## Stephan Gruener & Iros Barozzi
##
## License:
#~
## GNU GPL v3
## Copyright 2023
## Copyright Iros Barozzi Stephan Gruener
##
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
## Notes:
#~
##
##
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source("~/Documents/MUW/project_PA/SG_results/git/endocrine_therapy_resistance/fc.inc.libs.R")
source("~/Documents/MUW/project_PA/SG_results/git/endocrine_therapy_resistance/inc.func.R")
out_folder <- "fc_results/"
cmd <- paste0("mkdir ", out_folder)
system(cmd)
# load metadata
metadata_F <- "data_20240319/metadata_filtered_ordered.xlsx"
metadata_full <- as_tibble(read.xls(metadata_F, sheet = 2, header = TRUE, stringsAsFactors = FALSE)) %>%
mutate(sample = paste0(description, "_batch-", batch))
# exclude LNCaP_WM-2d
metadata_full <- metadata_full %>% dplyr::filter(description != "LNCaP_WM-2d")
# load decipher-seq results
nmf_res <- readRDS("data_20240319/NMF_results_atK.rds")
rn <- tibble(rownames = rownames(nmf_res$LNCaP$H))
name_tibble <- rn %>%
extract(rownames, into = c("sample", "barcode"), "(.*)_([^_]+)$", remove = FALSE) %>%
left_join(metadata_full, by = c("sample" = "sample")) %>%
select(-stats_folder, -stats_file)
# join metadata with nmf results
H.data <- data.frame(nmf_res$LNCaP$H) %>%
as_tibble(rownames = "rownames") %>%
extract(rownames, into = c("sample", "barcode"), "(.*)_([^_]+)$", remove = FALSE) %>%
left_join(metadata_full, by = c("sample" = "sample")) %>%
select(-stats_folder, -stats_file) %>%
relocate(starts_with("R"), .after = last_col())
# long format
H.data.long <- H.data %>%
pivot_longer(cols = starts_with("R22"), names_to = "gene_program")
# which parts of the script to run
run_factors <- TRUE
run_annotation <- TRUE
run_primary <- TRUE
run_decoupleR <- TRUE
#~~~~~~~~~~~~~~~~~~~~~~~~~
# Analyses of factor usage
##########################
if (run_factors) {
source("fc.run.factor_usage.R")
}
#~~~~~~~~~~~~~~~~~~
# Factor annotation
###################
if (run_annotation) {
#note: sort the programs using the 'programs_order' variable
#      (from the 'run_factors' step) to sort the results
source("fc.run.factor_anno.R")
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Integration with primary data
###############################
if (run_primary) {
source("fc.run.primary_data.R")
}
getwd()
library("Seurat")
library("tidyverse")
library("Seurat")
so <- readRDS("scRNA-Healthy-Hematopoiesis-191120.subset.so.rds")
so
so
so@meta.data[1:2,]
so[["percent.mt"]] <- PercentageFeatureSet(so, pattern = "^MT-")
head(so@meta.data, 10)    #display first 10 rows of the metadata table
head(so@meta.data, 1)    #display first 10 rows of the metadata table
VlnPlot(so, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0.1)
so
nFeature_RNA_min <- 1000
percent.mt_max <- 5
subset(so, percent.mt <= percent.mt_max & nFeature_RNA >= nFeature_RNA_min)
so
subset(so, percent.mt <= percent.mt_max & nFeature_RNA >= nFeature_RNA_min)
so <- subset(so, percent.mt <= percent.mt_max & nFeature_RNA >= nFeature_RNA_min)
so
so <- SCTransform(so, verbose = TRUE)
so
hvg_plot <- VariableFeaturePlot(so)
plot(hvg_plot)
top10 <- head(VariableFeatures(so), 10)
hvg_plot <- LabelPoints(plot = hvg_plot, points = top10, repel = TRUE)
plot(hvg_plot)
so <- RunPCA(object = so,
npcs = 100,
verbose = FALSE)
so
ElbowPlot(object = so, ndims = 100)
ElbowPlot(object = so, ndims = 100)
ElbowPlot(object = so, ndims = 100)
npcs <- 20
so <- RunUMAP(object = so,
dims = 1:npcs,
verbose = TRUE,
seed.use = 42)
DimPlot(object = so,
reduction = "umap",
pt.size = 0.3)
DimPlot(object = so,
reduction = "umap",
pt.size = 0.3,
group.by = "orig.BioClassification")
DimPlot(object = so,
reduction = "pca",
pt.size = 0.3,
group.by = "orig.BioClassification",
label = TRUE,
label.box = TRUE,
repel = TRUE) +
NoLegend()
DimPlot(object = so,
reduction = "umap",
pt.size = 0.3,
group.by = "orig.BioClassification",
label = TRUE,
label.box = TRUE,
repel = TRUE) +
NoLegend()
setwd("/Users/irosbarozzi/Documents/MUW/datasets/prostate_geps/linder_et_al_2022")
library("tidyverse")
library("DESeq2")
exp_data <- read_tsv("GSE197780_DARANA_GE_table.txt.gz")
exp_data
exp_data <- read_tsv("GSE197780_DARANA_GE_table.txt.gz", skip = 1)
exp_data
exp_data$gene_id %>% length()
exp_data$gene_id %>% unique() %>% length()
exp_data <- read_tsv("GSE197780_DARANA_GE_table.txt.gz", skip = 1)
exp_data
exp_data_long <- exp_data %>%
pivot_longer(cols = -c("ensembl_gene_id", "gene_id"))
exp_data_long
exp_data_long <- exp_data %>%
pivot_longer(cols = -c("ensembl_gene_id", "gene_id")) %>%
group_by(gene_id, name) %>%
summarise(value = mean(value))
exp_data_long
exp_data_wide <- exp_data_long %>%
pivot_wider(names_from = name, values_from = value)
exp_data_wide
exp_data_long
exp_data_long <- exp_data %>%
pivot_longer(cols = -c("ensembl_gene_id", "gene_id")) %>%
group_by(gene_id, name) %>%
summarise(value = mean(value)) %>%
ungroup()
exp_data_wide <- exp_data_long %>%
pivot_wider(names_from = name, values_from = value)
exp_data_wide
exp_data_mat <- exp_data_wide %>%
column_to_rownames(var = "gene_id")
exp_data_mat
colnames(exp_data_mat)
colnames(exp_data_mat)
sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][1]})
as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][1]}))
meta <- tibble(
indivisual = as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][1]})),
treatment = as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][2]}))
)
meta
se <- SummarizedExperiment(assays = list(counts = as.matrix(exp_data_mat)),
colData = as.data.frame(meta))
dds <- DESeqDataSet(se, design = ~ indivisual + treatment)
meta
colData(se)
dds <- DESeqDataSet(se, design = ~ indivisual + treatment)
exp_data
exp_data_mat
2^exp_data_mat
2^exp_data_mat-1
round(2^exp_data_mat-1, 0)
as.integer(round(2^exp_data_mat-1))
as.integer(round(2^exp_data_mat-1)) )
as.integer(round(2^exp_data_mat-1))
round(2^exp_data_mat-1)
View(exp_data_mat)
exp_data_mat <- round(2^exp_data_mat-1)
exp_data_mat
meta <- tibble(
indivisual = as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][1]})),
treatment = as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][2]}))
)
se <- SummarizedExperiment(assays = list(counts = as.matrix(exp_data_mat)),
colData = as.data.frame(meta))
dds <- DESeqDataSet(se, design = ~ indivisual + treatment)
dds
#normalisation
dds <- estimateSizeFactors(dds)
#VST
vsd <- vst(dds, blind = TRUE)
#PCA
pca_out <- plotPCA(vsd, intgroup = c("response"))
#PCA
pca_out <- plotPCA(vsd, intgroup = c("treatment"))
pca_out
#DESeq2
dds <- DESeq(dds)
#results
res_tib <- results(dds) %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble()
res_tib
res_tib
res_tib
res_tib %>% View
exp_data["FOS",]
exp_data_mat["FOS",]
meta
meta <- tibble(
individual = as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][1]})),
treatment = as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][2]}))
)
meta <- meta %>%
mutate(individual = factor(individual)) %>%
mutate(treatment = factor(treatment, levels = c("pre", "post")))
meta
meta$treatment
library("tidyverse")
library("DESeq2")
#~~~~~~~~~~~~~~~~
#Data Preparation
#################
exp_data <- read_tsv("GSE197780_DARANA_GE_table.txt.gz", skip = 1)
#Gene symbol -> mean across ensembl ids
exp_data_long <- exp_data %>%
pivot_longer(cols = -c("ensembl_gene_id", "gene_id")) %>%
group_by(gene_id, name) %>%
summarise(value = mean(value)) %>%
ungroup()
# to wide
exp_data_wide <- exp_data_long %>%
pivot_wider(names_from = name, values_from = value)
exp_data_mat <- exp_data_wide %>%
column_to_rownames(var = "gene_id")
# to integers
exp_data_mat <- round(2^exp_data_mat-1)
# column-order matched metadata
meta <- tibble(
individual = as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][1]})),
treatment = as.vector(sapply(colnames(exp_data_mat), function(x){strsplit(x, "_")[[1]][2]}))
)
meta <- meta %>%
mutate(individual = factor(individual)) %>%
mutate(treatment = factor(treatment, levels = c("pre", "post")))
se <- SummarizedExperiment(assays = list(counts = as.matrix(exp_data_mat)),
colData = as.data.frame(meta))
dds <- DESeqDataSet(se, design = ~ individual + treatment)
#normalisation
dds <- estimateSizeFactors(dds)
#VST
vsd <- vst(dds, blind = TRUE)
#PCA
pca_out <- plotPCA(vsd, intgroup = c("treatment"))
pdf("deseq2.results.pca.pdf", width = 4, height = 3.5)
plot(pca_out +
geom_point(size = 2) +
theme_bw())
dev.off()
#DESeq2
dds <- DESeq(dds)
#results
res_tib <- results(dds) %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble()
res_tib %>% View()
thresh_lfc <- log2(1.5)
thresh_fdr <- 0.05
res_tib <- res_tib %>%
mutate(significant = abs(log2FoldChange) >= thresh_lfc & padj <= thresh_fdr) %>%
mutate(significant = ifelse(is.na(significant), FALSE, significant)) %>%
mutate(significant_up = log2FoldChange >= thresh_lfc & padj <= thresh_fdr) %>%
mutate(significant_up = ifelse(is.na(significant_up), FALSE, significant_up)) %>%
mutate(significant_down = log2FoldChange <= -thresh_lfc & padj <= thresh_fdr) %>%
mutate(significant_down = ifelse(is.na(significant_down), FALSE, significant_down))
res_tib %>% View()
#save
write_tsv(res_tib, file = "deseq2.results.txt")
exp_data_long
as.vector(sapply(colnames(exp_data_long$name), function(x){strsplit(x, "_")[[1]][1]}))
as.vector(sapply(exp_data_long$name, function(x){strsplit(x, "_")[[1]][1]}))
exp_data_long$individul <- as.vector(sapply(exp_data_long$name, function(x){strsplit(x, "_")[[1]][1]}))
exp_data_long$treatment <- as.vector(sapply(exp_data_long$name, function(x){strsplit(x, "_")[[1]][2]}))
exp_data_long
exp_data_long %>% dplyr::filter(gene_symbol == "JUN") %>% ggplot(aes(x = treatment, y = value)) + geom_boxplot()
exp_data_long %>% dplyr::filter(gene_id == "JUN") %>% ggplot(aes(x = treatment, y = value)) + geom_boxplot()
exp_data_long %>% dplyr::filter(gene_id == "KLK3") %>% ggplot(aes(x = treatment, y = value)) + geom_boxplot()
